y = runif(1,lower_bound,higher_bound)
# corrections for cases of non symetrical proposals (appends when we are close to 0 or 1)
q_fw=1/(higher_bound-lower_bound)
q_bw=1/(min(1,y+e)-max(0,y-e))
# ratio alpha of posterior~Likelihood*prior (note that the denominator of the posterior cancel out)
alpha=(dbinom(nA,ntotal,y) * dbeta(y,a,a) * q_bw ) / (dbinom(nA,ntotal,p[t-1]) * dbeta(p[t-1],a,a)  * q_fw)
# accept the new value with probability alpha (draw a random number and compare it with alpha)
u = runif(1)
if (u <= min(1,alpha)) p[t] = y # accept it
else p[t] = p[t-1] # reject it (so keep the current value)
}
# now doing the plot
par(mfrow=c(1,2))  # divide the graph in two columns
plot(p,type='l',xlab="iteration",ylab="p",main="MCMC trace")  # plot the trace of the chain on the left
hist(p,br=30,prob=T,xlab="p",xlim=c(0,1),main="MCMC posterior") # plot the histogram on the right
lines(density(p),lwd=2) # add the density estimation
# add the true posterior and priors
true_posterior(nA,ntotal,a,add=T)
par(mfrow=c(1,1))  # reset the graph to one column
# credible interval
quantile(p,c(0.025,0.975))
}
##########################################
# Approximate the posterior with an ABC algorithm
# there is actually no approximation in this particular
# case because we keep simulations that match exactly our data
# n: number of simulations to perform
#########################################
perfect_abc_posterior = function(nA,ntotal,a,n){
b=a
# draw random parameters p from the beta prior
p=rbeta(n,a,b)
# simulate the data using these random parameters p
nA_simulated=rbinom(n,ntotal,prob=p)
# only keep the simulations that exactly match our data
p_accepted=p[nA_simulated==nA]
# plot the histogram
hist(p_accepted,prob=T,br=30,xlab="p",ylab="Density",xlim=c(0,1),main="Exact ABC posterior")
lines(density(p_accepted),lwd=2) # add the density estimation
# add the true posterior and priors
true_posterior(nA,ntotal,a,add=T)
# credible interval
quantile(p_accepted,c(0.025,0.975))
}
##########################################
# Approximate the posterior with an ABC algorithm
# n: number of simulations to perform
# epsilon: tolerance to accept simulations ie
# |nA_simulated-nA|<epsilon
# note that a single line changes in the code compare
# to the perfect_abc_posterior function (apart from plotting)
#########################################
abc_posterior = function(nA,ntotal,a,n,epsilon){
b=a
p=rbeta(n,a,b)
nA_simulated=rbinom(n,ntotal,prob=p)
# keep simulations with a certain tolerance epsilon
p_accepted=p[abs(nA_simulated-nA)<epsilon]
true_posterior(nA,ntotal,a)
title("ABC posterior")
hist(p_accepted,prob=T,br=30,add=T)
lines(density(p_accepted),lwd=2)
# credible interval
quantile(p_accepted,c(0.025,0.975))
}
##########################################
# Approximate the posterior with an ABC algorithm
# and perform a local linear regression correction
# n: number of simulations to perform
# epsilon: tolerance to accept simulations ie
# |nA_simulated-nA|<epsilon
# note that the first part of the code is the same as
# the abc_posterior function above
#########################################
abc_corrected_posterior = function(nA,ntotal,a,n,epsilon){
b=a
p=rbeta(n,a,b)
nA_simulated=rbinom(n,ntotal,prob=p)
p_accepted=p[abs(nA_simulated-nA)<epsilon]
par(mfrow=c(2,2))  # divide the graph in 4
true_posterior(nA,ntotal,a)
title("ABC posterior without correction")
hist(p_accepted,prob=T,br=30,add=T)
lines(density(p_accepted),lwd=2)
# show the error we make by accepting thing with a certain tolerance
nA_accepted=nA_simulated[abs(nA_simulated-nA)<epsilon]
plot(nA_accepted,p_accepted,xlab="nA",ylab="p",main="Local linear regression")
abline(v=nA,col="green",lwd=5)
# do the linear regression
reg=lm(p_accepted~nA_accepted)
# plot the regression line
abline(reg,lw=5)
# make the correction
p_corrected=predict(reg,data.frame(nA_accepted=nA))+p_accepted-predict(reg)
# plot the new corrected posterior
hist(p_corrected,prob=T,br=30,xlab="p",ylab="Density",xlim=c(0,1),main="ABC posterior with correction")
lines(density(p_corrected),lwd=2)
true_posterior(nA,ntotal,a,add=T)
perfect_abc_posterior(nA,ntotal,a,n=n)
par(mfrow=c(1,1))  # reset the graph in one column
# credible interval
quantile(p_corrected,c(0.025,0.975))
}
true_posterior(10,30,1)
true_posterior(10,30,10)
true_posterior(100,300,10)
true_posterior(10,30,100)
true_posterior(10,30,1000)
true_posterior(10,30,100)
true_posterior(100,300,100)
true_posterior(100,300,10)
true_posterior(10,30,10)
true_posterior(100,300,10)
true_posterior(1000,3000,10)
true_posterior(10,30,10)
true_posterior(1000,3000,100)
true_posterior(100,300,100)
true_posterior(10,30,100)
true_posterior(10,30,1)
true_posterior(10,30,10)
true_posterior(15,30,10)
true_posterior(15,30,1)
true_posterior(15,30,100)
true_posterior(15,30,10)
mcmc_posterior(10,30,1,n=100)
mcmc_posterior(10,30,1,n=1000)
mcmc_posterior(10,30,1,n=10000)
mcmc_posterior(10,30,1,n=10000,p0=1)
mcmc_posterior(10,30,1,n=1000,p0=1)
mcmc_posterior(10,30,1,n=100,p0=1)
mcmc_posterior(10,30,1,n=500,p0=1)
mcmc_posterior(10,30,1,n=500,p0=0.01)
mcmc_posterior(10,30,1,n=500,e=0.01)
mcmc_posterior(10,30,1,n=100,e=0.01)
mcmc_posterior(10,30,1,n=1000,e=1)
mcmc_posterior(10,30,1,n=1000,e=0.01)
mcmc_posterior(10,30,1,n=1000,p0=1,e=0.01)
mcmc_posterior(10,30,1,n=1000,e=0.01)
mcmc_posterior(10,30,1,n=1000)
mcmc_posterior(10,30,1,n=1000,e=0.01)
mcmc_posterior(10,30,1,n=1000,p0=1,e=1)
mcmc_posterior(10,30,1,n=100000,p0=1,e=0.01)
perfect_abc_posterior(10,30,1,n=1000)
perfect_abc_posterior(10,30,1,n=1000)
perfect_abc_posterior(10,30,1,n=1000)
perfect_abc_posterior(10,30,1,n=10000)
perfect_abc_posterior(10,30,1,n=10000)
perfect_abc_posterior(10,30,1,n=10000)
perfect_abc_posterior(10,30,1,n=10000)
perfect_abc_posterior(10,30,1,n=100000)
perfect_abc_posterior(10,30,1,n=100000)
perfect_abc_posterior(10,30,1,n=100000)
perfect_abc_posterior(10,30,1,n=10000)
perfect_abc_posterior(10,30,1,n=10000)
perfect_abc_posterior(10,30,1,n=10000)
perfect_abc_posterior(10,30,1,n=10000)
perfect_abc_posterior(100,300,1,n=10000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(1000,3000,1,n=100000)
perfect_abc_posterior(1000,3000,1,n=100000)
perfect_abc_posterior(1000,3000,1,n=100000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(10,30,1,n=100000)
perfect_abc_posterior(10,30,1,n=100000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(100,300,1,n=10000)
perfect_abc_posterior(10,30,1,n=10000)
perfect_abc_posterior(100,300,1,n=10000)
perfect_abc_posterior(1000,3000,1,n=10000)
perfect_abc_posterior(1000,3000,1,n=100000)
perfect_abc_posterior(1000,3000,1,n=1000000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(100,300,1,n=1000000)
perfect_abc_posterior(100,300,1,n=1000000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(100,300,1,n=100000)
perfect_abc_posterior(1000,3000,1,n=100000)
perfect_abc_posterior(1000,3000,1,n=1000000)
perfect_abc_posterior(1000,3000,1,n=1000000)
perfect_abc_posterior(1000,3000,1,n=1000000)
perfect_abc_posterior(1000,3000,1,n=10000000)
10000000/3600
10000000/3600/24
10000000/3600/24/30
10000000/3600/24/30
pbinom(1000,3000,0.3)
?pbinom
dbinom(1000,3000,0.3)
dbinom(1000,3000,0.3)*10000000
abc_posterior(100,300,1,n=10000,epsilon=5)
abc_posterior(100,300,1,n=10000,epsilon=20)
abc_posterior(100,300,1,n=10000,epsilon=20)
abc_posterior(100,300,1,n=10000,epsilon=5)
abc_posterior(100,300,1,n=10000,epsilon=1)
abc_posterior(10,30,1,n=10000,epsilon=1)
abc_posterior(10,30,1,n=10000,epsilon=2)
abc_posterior(10,30,1,n=10000,epsilon=5)
abc_posterior(10,30,1,n=10000,epsilon=0)
abc_posterior(10,30,1,n=10000,epsilon=1)
abc_posterior(10,30,1,n=10000,epsilon=3)
abc_posterior(10,30,1,n=10000,epsilon=5)
abc_posterior(1000,3000,1,n=10000,epsilon=100)
abc_posterior(1000,3000,1,n=10000,epsilon=100)
abc_posterior(1000,3000,1,n=100000,epsilon=100)
abc_posterior(1000,3000,1,n=10000,epsilon=50)
abc_posterior(100,300,1,n=10000,epsilon=1)
abc_posterior(100,300,1,n=10000,epsilon=10)
abc_posterior(100,300,1,n=10000,epsilon=20)
abc_posterior(100,300,1,n=10000,epsilon=10)
abc_posterior(100,300,1,n=10000,epsilon=20)
abc_posterior(1000,3000,1,n=100000,epsilon=10)
abc_posterior(1000,3000,1,n=100000,epsilon=1)
abc_posterior(1000,3000,1,n=10000,epsilon=10)
abc_posterior(1000,3000,1,n=10000,epsilon=50)
abc_posterior(1000,3000,1,n=10000,epsilon=100)
abc_posterior(1000,3000,1,n=100000,epsilon=10)
abc_posterior(1000,3000,1,n=100000,epsilon=10)
abc_posterior(1000,3000,1,n=10000000,epsilon=1)
abc_posterior(1000,3000,1,n=100000,epsilon=10)
abc_posterior(100,300,1,n=100000,epsilon=10)
abc_posterior(100,300,1,n=10000,epsilon=10)
abc_posterior(100,300,1,n=10000,epsilon=20)
abc_posterior(100,300,1,n=10000,epsilon=30)
abc_posterior(100,300,1,n=10000,epsilon=50)
abc_corrected_posterior(100,300,1,n=10000,epsilon=20)
abc_corrected_posterior(100,300,1,n=10000,epsilon=50)
abc_corrected_posterior(100,300,1,n=10000,epsilon=100)
abc_corrected_posterior(100,300,1,n=10000,epsilon=20)
abc_corrected_posterior(100,300,1,n=10000,epsilon=100)
abc_corrected_posterior(100,300,1,n=10000,epsilon=100)
abc_corrected_posterior(100,300,1,n=10000,epsilon=200)
abc_corrected_posterior(100,300,1,n=10000,epsilon=200)
abc_corrected_posterior(10,30,1,n=10000,epsilon=200)
abc_corrected_posterior(10,30,1,n=10000,epsilon=200)
abc_corrected_posterior(100,300,1,n=10000,epsilon=200)
abc_corrected_posterior(10,30,1,n=10000,epsilon=200)
abc_corrected_posterior(10,30,1,n=10000,epsilon=20)
abc_corrected_posterior(1000,3000,1,n=10000,epsilon=200)
abc_corrected_posterior(1000,3000,1,n=10000,epsilon=100)
abc_corrected_posterior(1000,3000,1,n=10000,epsilon=500)
abc_corrected_posterior(1000,3000,1,n=10000,epsilon=100)
abc_corrected_posterior(1000,3000,1,n=10000,epsilon=200)
abc_corrected_posterior(1000,3000,1,n=10000,epsilon=500)
10000/3600
> abc_posterior(1000,3000,1,n=10000,epsilon=500)
abc_posterior(1000,3000,1,n=10000,epsilon=500)
source('~/Dropbox/Work/Teaching EPFL statistical genetics inference/binomial_beta.r')
runif(10)
p=runif(10)
p
rbinom(1,30,0.114712)
rbinom(1,30,0.114712)
rbinom(1,30,0.114712)
rbinom(1,30,0.114712)
rbinom(1,30,0.114712)
rbinom(1,30,0.114712)
rbinom(1,30,p)
rbinom(10,30,p)
abc_corrected_posterior(10,30,1,10000,5)
?rhyper
source('~/.active-rstudio-document')
posterior_hyper(10,30,1,10000,1)
source('~/.active-rstudio-document')
posterior_hyper(10,30,1,10000,1)
posterior_hyper(10,30,1,10000,0)
posterior_hyper(10,30,1,100000,1)
posterior_hyper(10,30,1,100000,1)
posterior_hyper(100,300,1,100000,1)
source('~/.active-rstudio-document')
posterior_hyper(10,30,1,300,300,100000,1)
source('~/.active-rstudio-document')
posterior_hyper(10,30,1,300,300,100000,1)
posterior_hyper(10,30,1,300,300,1000000,1)
source('~/.active-rstudio-document')
posterior_hyper(10,30,1,300,300,1000000,1)
source('~/Dropbox/Work/Teaching EPFL statistical genetics inference/binomial_beta.r')
rbeta(100,1,1)
p=rbeta(10000,1,1)
rbinom(1,30,0.5)
rbinom(1,30,0.5)
rbinom(1,30,0.5)
rbinom(1,30,0.5)
rbinom(1,30,0.8)
rbinom(1,30,0.8)
rbinom(100,30,p)
nA_simulated=rbinom(10000,30,p)
nA
nA_simulated
p_accepted=p[nA_simulated==10]
p_accepted
hist(p_accepted)
perfect_abc_posterior(10,30,1,10000)
perfect_abc_posterior(10,30,1,1000)
perfect_abc_posterior(10,30,1,10000)
perfect_abc_posterior(10,30,1,100000)
perfect_abc_posterior(10,30,1,100000)
perfect_abc_posterior(10,30,1,1000)
perfect_abc_posterior(10,30,1,100000)
perfect_abc_posterior(10,30,1,1000)
perfect_abc_posterior(10,30,1,100000)
perfect_abc_posterior(100,300,1,100000)
perfect_abc_posterior(100,300,1,10000)
perfect_abc_posterior(100,300,1,1000)
perfect_abc_posterior(100,300,1,1000)
perfect_abc_posterior(100,300,1,1000)
perfect_abc_posterior(1000,3000,1,100000)
perfect_abc_posterior(1000,3000,1,1000000)
perfect_abc_posterior(1000,3000,1,10000000)
perfect_abc_posterior(1000,3000,1,10000000)
abc_posterior(10,30,1,5,100000)
abc_posterior(10,30,1,100000,5)
abc_posterior(10,30,1,100000,5)
abc_posterior(10,30,1,10000,5)
abc_posterior(10,30,1,10000,8)
abc_posterior(10,30,1,10000,10)
abc_posterior(10,30,1,10000,15)
abc_posterior(10,30,1,10000,20)
abc_posterior(10,30,1,10000,1)
abc_posterior(10,30,1,10000,10)
abc_posterior(100,300,1,10000,10)
abc_posterior(100,300,1,10000,50)
abc_corrected_posterior(100,300,1,10000,50)
abc_corrected_posterior(10,30,1,10000,50)
abc_corrected_posterior(10,30,1,10000,5)
source('~/Dropbox/Work/Teaching EPFL statistical genetics inference/binomial_beta.r')
abc_corrected_posterior(10,30,1,10000,5)
abc_corrected_posterior(100,300,1,n=10000,epsilon=20)
source('~/Dropbox/Work/Teaching EPFL statistical genetics inference/binomial_beta.r')
abc_corrected_posterior(100,300,1,n=10000,epsilon=20)
abc_corrected_posterior(1000,3000,1,n=10000,epsilon=100)
abc_corrected_posterior(1000,3000,1,n=10000,epsilon=100)
abc_corrected_posterior(1000,3000,1,n=10000,epsilon=1000)
abc_corrected_posterior(100,300,1,n=10000,epsilon=100)
abc_corrected_posterior(10,30,1,n=10000,epsilon=10)
source('~/Dropbox/Work/Teaching EPFL statistical genetics inference/msms_ABC_solution.r')
source('~/Dropbox/Work/Teaching EPFL statistical genetics inference/msms_ABC_solution.r')
quantile(Ne_corrected,c(0.025,0.975))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
S=50
# accepted values of Ne within the tolerance distance
epsilon=3
Ne_accepted=Ne[abs(sim_S-S)<epsilon]
# do the linear regression
S_accepted=sim_S[abs(sim_S-S)<epsilon]
reg=lm(Ne_accepted~S_accepted)
# make the correction
Ne_corrected=predict(reg,data.frame(S_accepted=S))+Ne_accepted-predict(reg)
# divide the graph in two
par(mfrow=c(1,2))
# plot the corrected posterior
plot(density(Ne_corrected),main="Ne posterior",xlab="Ne",lwd=2,col="blue")
# plot the uncorrected posterior
lines(density(Ne_accepted),lwd=2)
# add the prior in red
abline(h=1/(higher_bound-lower_bound),lwd=2,col="red")
# add the Watterson estimator
abline(v=Ne_W,lwd=2,col="black")
# plot the regression
plot(S_accepted,Ne_accepted,xlab="S",ylab="Ne",main="Local linear regression")
abline(reg,lw=5)
abline(v=S,col="green",lwd=5)
par(mfrow=c(1,1))  # reset the graph in one column
# credible intervals
quantile(Ne_accepted,c(0.025,0.975))
quantile(Ne_corrected,c(0.025,0.975))
# Watterson estimate
Ne_W
2*10^6/200
calculate_qvalues<-function(file)
{
res=read.table(file)
q_vals=c()
for (i in 1:nrow(res)) {
significant=res[res$prob>=res$prob[i],]
q_vals[i]=sum(1-significant$prob)/nrow(significant)
}
q_vals
}
prob=runif(10000)
source('~/.active-rstudio-document', echo=TRUE)
calculate_qvalues(prob)
qvals=calculate_qvalues(prob)
plot(prob,qvals)
prob=runif(100000)
qvals=calculate_qvalues(prob)
time()
clock()
time()
590000*1000/10^9
590000*1000/10^6
wright_fisher<-function(j=1,N,s,s_start=1,h=0.5,ploidy=2,t,t0) {
x=numeric(t)
x[t0]=j
for (i in (t0+1):t)
{
my_s=s
if(i<=s_start) my_s=0
wAA=1+my_s;wAa=1+my_s*h;waa=1
wA=1+my_s;wa=1
p=x[i-1]/(ploidy*N)
if (ploidy==2) {
prob=(wAA*p^2+wAa*p*(1-p))/(wAA*p^2+wAa*2*p*(1-p)+waa*(1-p)^2)
}
else {
prob=wA*p/(wA*p+wa*(1-p))
}
x[i]=rbinom(1,ploidy*N,prob)
if (x[i]==0) break
}
x
}
wright_fisher(10,200,0.1,t=200,t0=1)
plot(wright_fisher(10,200,0.1,t=200,t0=1))
plot(wright_fisher(10,200,0.1,t=200,t0=1))
plot(wright_fisher(10,200,0.1,t=200,t0=1))
plot(wright_fisher(10,200,0.1,t=200,t0=1),type="l")
wright_fisher(10,200,0.1,t=200,t0=1)
wright_fisher(10,200,0.1,t=200,t0=1)
rbinom(1,size=1000,3/200)
time_sampling<-function(j=1,N,s,h=0.5,ploidy=2,t,t0,nb_times,N_sample,plot=T,min_freq=0.05,add=T) {
# simulate until an allele is not lost
repeat{
if(is.function(s)) my_s=s() else my_s=s
x=wright_fisher(j,N,my_s,h,ploidy,t,t0)
# sample time points
sample_times=round(seq(1,t,length=nb_times))
sample_freq=rbinom(nb_times,ploidy*N_sample,x[sample_times]/(ploidy*N))
if(max(sample_freq)>min_freq*ploidy*N_sample){
break
}
}
# plot the trajectory
if (plot) {
plot(x/(ploidy*N),type="l",ylim=c(0,1),xlab="Generation",ylab="Frequency")
lines(sample_times,sample_freq/(ploidy*N_sample),type="o",pch=19,lty=2)
points(t0,1/(ploidy*N),col="red",pch=15)
lines(c(0,t),c(min_freq,min_freq),col="red")
}
list("sample_times"=sample_times,"sample_freq"=sample_freq,"s"=my_s)
}
time_sampling(1,200,0.1,t=200,t0=1)
time_sampling(1,200,0.1,t=200,t0=1,13,1000)
time_sampling(1,200,0.1,t=200,t0=1,13,1000)
plot_time_sampling(nreps=8,N=N,s=0,s_start=52,ploidy=ploidy,t=t,t0=t0,nb_times=nb_times,N_sample=N_sample,min_freq=min_freq)
# do the same as the last function but plot several replicates (nreps) on one graph with colors
plot_time_sampling<-function(j=1,nreps,N,s,s_start,h=0.5,ploidy=2,t,t0,nb_times,N_sample,min_freq=0.05) {
ntotal=0
# simulate until an allele is not lost
plot(0,xlim=c(0,nb_times-1),ylim=c(0,1),xlab="Passage",ylab="Allele frequency",type="n")
for(rep in 1:nreps) {
repeat{
ntotal=ntotal+1
x=wright_fisher(j,N,s,s_start,h,ploidy,t,t0)
# sample time points
sample_times=round(seq(1,t,length=nb_times))
sample_freq=rbinom(nb_times,ploidy*N_sample,x[sample_times]/(ploidy*N))
if(max(sample_freq)>min_freq*ploidy*N_sample) {
#if((sample_freq[nb_times])>min_freq*ploidy*N_sample) {
break
}
}
lines(0:(nb_times-1),sample_freq/(ploidy*N_sample),col=rainbow(nreps)[rep],lwd=3,type="b")
#lines(x/(ploidy*N),col=rainbow(nreps)[rep],lwd=3)
}
nreps/ntotal
}
plot_time_sampling(nreps=8,N=N,s=0,s_start=52,ploidy=ploidy,t=t,t0=t0,nb_times=nb_times,N_sample=N_sample,min_freq=min_freq)
10^6/(2*3.89/10^7)
10^6/(2*3.89*10^7)
10^8.5/(2*3.89*10^7)
10^7/(2*3.89*10^7)
10^6.2/(2*3.89*10^7)
10^8.2/(2*3.89*10^7)
1/(1+exp(-1))
1/(1+exp(-0))
1/(1+exp(1))
load("/Users/mfoll/Dropbox/Work/Influenza time sample/influenza_data/H1N1/All results 12 points new Ne bootstrap ABC ascert clonal/H1N1.RData")
acc_abc=0.01
acc_abc=0.01
source('/Users/mfoll/Desktop/test.R', echo=TRUE)
debugSource('/Users/mfoll/Desktop/test.R', echo=TRUE)
test=function(x) {
if (x>0) {
a=T
} else {
a=F
}
a
}
test(2)
debugSource('~/Desktop/test.R', echo=TRUE)
debugSource('~/Desktop/test.R', echo=TRUE)
source('~/Desktop/test.R', echo=TRUE)
test(2)
library(rgl)
rgl.open()
setwd("~/Dropbox/Work/WF_sim_c/distributed/R scripts")
setwd("~/Dropbox/Work/WF_sim_c/distributed/sources")
system("./wfabc_1 -nboots 0 data_medionigra.txt")
system("./wfabc_2 -fixed_N 1000 -min_s -1 -max_s 0.1 data_medionigra.txt")
system("./wfabc_1 -nboots 0 data_medionigra.txt")
system("./wfabc_2 -fixed_N 1000 -min_s -1 -max_s 0.1 data_medionigra.txt")
post_s=read.table("data_medionigra_posterior_s.txt")
plot(density(t(post_s[1,])),lwd=2,main="s Posterior",xlab="s")
mean(t(post_s[1,])))
mean(t(post_s[1,]))
mode(t(post_s[1,]))
